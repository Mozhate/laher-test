//// 全局变量
//// 除非全局变量具有恒定的不变值，否则请勿使用全局变量在规则中建立条件
//// 不要使用全局变量在规则之间共享数据，全局变量的用例可能是电子邮件服务的实例
//// 如：emailService指定为email，然后在规则中email.send()
//global java.util.List myGlobalList;
//
//// 声明为事件类型
//declare VoiceCall
//    // 该标签确定在复杂事件处理期间，给定的事实类型是作为常规事实还是在Drools引擎中的事件处理
//    // 默认：fact，参数：fact|event
//    @role(event)
//
//    // 该标签会自动分配给Drools引擎每个事件
//    // 默认：Drools会话时钟增加的时间，支持参数：自定义时间戳属性
//    @timestamp(callDateTime)
//
//    // 该标签确定Drools引擎事件持续时间
//    // 默认：空/零，支持参数：自定义工期属性
//    @duration(callDuration)
//
//    // 该标签确定事件在Drools工作引擎内存中过期前的持续时间，
//    // 默认：null/事件不匹配规则事件就会过期，支持参数：timeOffset格式的自定义属性[#d][#h][#m][#s][[ms]
//    @expires(1h15m)
//
//    // 该标签确定是否使用类型安全编译数据类型
//    // 默认：true，支持参数：true\false
//    @typesafe(false)
//
//    // 该标签声明可序列化定义的标识值
//    // 默认：空，支持单数：自定义整数
//    @serialVersionUID(42)
//
//    // 该标签确定声明的数据类型属性和字段在参数中的位置
//    // 默认：无，支持参数：自定义整数
//    // 以下顺序：lastName age firstName
//    // 父子定义关系注释中，相同位置父优先，子其次，不同位置根据顺序来，无注释的父优先
//    age : int @posision(1)
//
//    // 该标签使数据类型属性可用做数据类型的标识符
//    // 默认：无，支持参数：无
//    firstName : String @key @posision(2)
//    lastName : String @key @posision(0)
//
//end
//
//// 规则
//rule "rule-name"
//    // 继承-可以有效避免冗余
//    extends "rule-parent"
//// 属性
//    // 定义规则优先级的整数，相同优先级按先后顺序，大先小后
//    salience 10
//
//    // 是否启用
//    enabled false
//
//    // 包含日期和时间定义的字符串，当前日期在该定义日期之后激活规则，之前规则不能使用
//    date-effective "4-Sep-2018"
//
//    // 包含日期和时间定义的字符串，当前日期在该定义日期之前激活规则，之后规则不能使用
//    date-expires "4-Oct-2018"
//
//    // 规则重新触发先前规则，则无法重新激活
//    no-loop true
//
//    // 对规则分配不同的议程组
//    agenda-group "group"
//
//    // 下次激活该规则，自动将焦点分配给该规则的议程组
//    auto-focus true
//
//    // 同一个激活组中触发了第一个规则，将取消所有其他的规则
//    activation-group "activationGroup"
//
//    // 规则流组，只有相关规则流激活了，规则才会触发
//    ruleflow-group "ruleflowGroup"
//
//    // 下次激活该规则，当活动规则获取焦点时，无法再次激活获取规则
//    lock-on-active true
//
//    // 满足规则条件则触发规则持续时间
//    duration 1000
//
//    // 调度规则的定时器 cron 每15分钟一次
//    timer ( cron:* 0/15 * * * ? )
//
//    // 标识规则代码的表达式为JAVA或MVEL作为语言
////    dialect "JAVA"
//
//when
//// 条件
//    // when包含执行操作和必须满足的条件，如果when部分为空则条件结果为真
//    // 第一次fireAllRules()会执行内部操作
//    // 组合条件没有定义关键字（or not and && ||）默认为and
//    // 正则：matches、not matches
//    // 可以使用默认属性来进行条件判断
//    // 元素判断不用考虑空判断，可直接使用==，!=，运算符，比较符
//
//    // 将变量绑定到模式和约束如：$p:Person()
//    // 将变量绑定到模式中的属性：Person($age : age)
//    // 模式中的属性增加条件约束：Person($age == age)
//
//    // 访问属性对象模式
//    // Person(name=="laher",address.city="长沙",address.country=="uk")
//    // 或者分组属性对象模式，格式：对象属性.()
//    // Person(name=="laher",address.(city=="长沙",country=="uk"))
//
//    // 属性对象强制转换子类型对象，格式：对象属性#子对象属性
//    // Person(address#ChildAddress.country=="uk")
//
//    // 通过[]访问list和map的属性
//    // Person(childList[0].age == 18)
//    // Person(childMap[""].age == 18)
//
//    // 集合是否指定值(可用于字符串)：contains、not contains
//    // Person(fullName contains $var)
//
//    // 验证字段是否存在集合内($europeanDescendants是集合)
//    // Person(person memberOf $europeanDescendants)
//
//    // in满足条件 notin不允许是这些条件
//    // Person( $color : favoriteColor )
//    // Color( type in ( "red", "blue", $color ) )
//    // Color( type notin ( "red", "blue", $color ) )
//
//    // exists必须存在的事实和约束
//    // exists Person( firstName == "John")
//
//    // from绑定数据源
//    // Person( $personAddress : address )
//    // Address( zipcode == "23920W" ) from $personAddress
//    // $p : Person()
//    // $a : Address( zipcode == "23920W" ) from $p.address
//
//    // eval允许执行任何语义代码（返回原始布尔值）
//    // p1 : Parameter()
//    // p2 : Parameter()
//    // eval( isValid( p1, p2 ) )
//
//    // OOPath是XPath的面向对象语法扩展，旨在浏览DRL规则条件约束中的对象图
//    // OOPath表达式的EBNF表示法
//    // OOPExpr = [ID ( ":" | ":=" )] ( "/" | "?/" ) OOPSegment { ( "/" | "?/" | "." ) OOPSegment } ;
//    // OOPSegment = ID ["#" ID] ["[" ( Number | Constraints ) "]"]
//    // 实例：Student( $grade: /plan/exams[course == "Big Data"]/grades )
//
//then
//// 内容
//    // 满足条件后的操作行为
//    // set设置字段值
//    setName('张三')
//
//    // modify修改字段，且将结果通知给drools引擎
//    modify(user){
//        setName('张三')
//    }
//    modify(user)
//
//    // insert新增数据到Drools引擎工作存储器中
//    insert(new User)
//
//    // insertLogical逻辑上将数据插入引擎中
//    insertLogical(new User)
//
//    // delete从引擎中删除对象
//    delete(user)
//end

//rule "减少冗余满足1条件走默认，满足b条件giveDiscount10，c走giveDiscount5"
//when
//    $customer : Customer( age > 60 )
//    if ( type == "Golden" ) do[giveDiscount10]
//    else if ( type == "Silver" ) break[giveDiscount5]
//    $car : Car( owner == $customer )
//then
//    modify($car) { setFreeParking( true ) };
//then[giveDiscount10]
//    modify($customer) { setDiscount( 0.1 ) };
//then[giveDiscount5]
//    modify($customer) { setDiscount( 0.05 ) };
//end

// drl性能调优
// 1从左到右定义模式约束的属性和值,如：Person( firstName == "John" )而不是Person( "John" == firstName )
// 2尽可能在模式约束中使用相等运算符，而不是其他运算符类型,如：模式Person( firstName == "John" )比评估效率更高Person( firstName != "OtherName" )
// 3首先列出限制性最强的规则条件，对于具有多个条件的规则，请列出从最高到最低限制的条件，以便Drools引擎可以避免在不满足更多限制条件的情况下评估整个条件集
// 4避免迭代带有过多from子句的大型对象集合
// 5使用Drools引擎事件侦听器，而不是System.out.println规则中的语句进行调试日志记录
// 6使用drools-metric模块来识别规则中的障碍，可以使用该drools-metric模块来识别慢速规则，尤其是在处理许多规则时，可以帮助分析Drools发动机性能，不适用于生产环境